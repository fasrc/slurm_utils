#!/usr/bin/env python
"""\
NAME
	slurm_over_askers - name users asking for more memory than needed

SYNOPSIS
	sacct -a -o 'User,JobID,ReqMem,MaxRSS,State,JobName' -P -n | \
	slurm_over_askers RATIO

	where FACTOR is the ReqMem/MaxRSS value larger than which you want to flag.

DESCRIPTION
	This reads in a specific format for sacct output, see the SYNOPSIS.

	It prints out the names of users where the average ReqMem/MaxRSS is larger 
	than the given threshold RATIO, and the value of that average ratio for the 
	user.

	Add -l/--long-format for more details.

OPTIONS
	-l, --long-format
		Print more information

	-h, --help
		Print this help.

REQUIREMENTS
	numpy

BUGS/TODO
	n/a

AUTHOR
	Copyright (c) 2013
	Harvard FAS Research Computing
	John A. Brunelle
"""

import sys, os, getopt, numpy as np

threshold_ratio = None
long_format = False

try:
	opts, args = getopt.gnu_getopt(sys.argv[1:], 'lh', ('long_format','help',))
except getopt.GetoptError, e:
	sys.stderr.write("*** ERROR **** unable to process command line options: %s\n" % e)
	sys.exit(1)
for opt, optarg in opts:
	if opt in ('-l', '--long-format'):
		long_format = True
	elif opt in ('-h', '--help'):
		sys.stdout.write(__doc__)
		sys.exit(0)

try:
	threshold_ratio = float(args[0])
except IndexError, ValueError:
	sys.stderr.write("*** ERROR *** usage: %s THRESHOLD_RATIO\n" % (os.path.basename(sys.argv[0])))
	sys.exit(1)


#---


#each user a 3-item list of lists
data = {}

lastuser = None

for line in sys.stdin.readlines():
	try:
		line = line.strip()
		User, JobID, ReqMem, MaxRSS, State, JobName = line.split('|')

		if User!='':
			lastUser = User

		if State!='COMPLETED' or JobName!='batch' or not JobID.endswith('.batch'):
			continue
		if ReqMem.endswith('Mn') and MaxRSS not in ('','0'):  #i.e. --mem / memory per node; ignore --mem-per-cpu
			ReqMem = float(ReqMem[:-2])*1024**2
			
			if MaxRSS.endswith('K'):
				MaxRSS = float(MaxRSS[:-1])*1024
			elif MaxRSS.endswith('M'):
				MaxRSS = float(MaxRSS[:-1])*1024**2
			elif MaxRSS.endswith('G'):
				MaxRSS = float(MaxRSS[:-1])*1024**3
			elif MaxRSS.endswith('T'):
				MaxRSS = float(MaxRSS[:-1])*1024**4
			elif MaxRSS.endswith('P'):
				MaxRSS = float(MaxRSS[:-1])*1024**5
			else:
				print MaxRSS

			Ratio = ReqMem/MaxRSS
			
			try:
				l = data[lastUser]
			except KeyError:
				l = [[], [], [], []]
				data[lastUser] = l
			l[0].append(ReqMem)
			l[1].append(MaxRSS)
			l[2].append(Ratio)
			l[3].append(JobID)
	except Exception:
		sys.stderr.write("*** ERROR *** unable to parse line [%r]\n" % line)

for User, l in data.items():
	njobs   = len(l[0])
	aReqMem = np.average(l[0])
	aMaxRSS = np.average(l[1])
	aRatio  = np.average(l[2])
	if aRatio > threshold_ratio:
		if long_format:
			jobs = []
			for ReqMem, MaxRSS, Ratio, JobID in zip(l[0], l[1], l[2], l[3]):
				if ReqMem/MaxRSS > aRatio: jobs.append(JobID)
			print "%s %s (njobs: %d, average ReqMem: %s, average MaxRSS: %s, jobs: %s)" % (User, aRatio, njobs, aReqMem, aMaxRSS, jobs)
		else:
			print User, aRatio
